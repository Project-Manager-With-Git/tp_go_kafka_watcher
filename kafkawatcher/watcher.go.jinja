package kafkawatcher

import (
	"errors"

	log "github.com/Golang-Tools/loggerhelper/v2"
	"github.com/confluentinc/confluent-kafka-go/kafka"
)

//ErrProxyAllreadySettedClient 代理已经设置过redis客户端对象
var ErrProxyAllreadySettedClient = errors.New("代理不能重复设置客户端对象")

//Callback redis操作的回调函数
type Callback func(cli *kafka.Consumer) error

//ConsumerProxy redis客户端的代理
type ConsumerProxy struct {
	*kafka.Consumer
	parallelcallback bool
	callBacks        []Callback
}

// New 创建一个新的数据库客户端代理
func New() *ConsumerProxy {
	proxy := new(ConsumerProxy)
	return proxy
}

// IsOk 检查代理是否已经可用
func (proxy *ConsumerProxy) IsOk() bool {
	return proxy.Consumer != nil
}

//SetConnect 设置连接的客户端
//@params cli UniversalClient 满足redis.UniversalClient接口的对象的指针
func (proxy *ConsumerProxy) SetConnect(cli *kafka.Consumer) error {
	if proxy.IsOk() {
		return ErrProxyAllreadySettedClient
	}

	proxy.Consumer = cli
	if proxy.parallelcallback {
		for _, cb := range proxy.callBacks {
			go func(cb Callback) {
				err := cb(proxy.Consumer)
				if err != nil {
					log.Error("regist callback get error", log.Dict{"err": err})
				} else {
					log.Debug("regist callback done")
				}
			}(cb)
		}
	} else {
		for _, cb := range proxy.callBacks {
			err := cb(proxy.Consumer)
			if err != nil {
				log.Error("regist callback get error", log.Dict{"err": err})
			} else {
				log.Debug("regist callback done")
			}
		}
	}
	return nil
}

//InitFromOptions 从配置条件初始化代理对象
func (proxy *ConsumerProxy) InitFromOptions(options *kafka.ConfigMap) error {
	cli, err := kafka.NewConsumer(options)
	if err != nil {
		return err
	}
	return proxy.SetConnect(cli)
}

//InitFromOptionsParallelCallback 从配置条件初始化代理对象,并行执行回调函数
func (proxy *ConsumerProxy) InitFromOptionsParallelCallback(options *kafka.ConfigMap) error {
	cli, err := kafka.NewConsumer(options)
	if err != nil {
		return err
	}
	proxy.parallelcallback = true
	return proxy.SetConnect(cli)
}

// Regist 注册回调函数,在init执行后执行回调函数
//如果对象已经设置了被代理客户端则无法再注册回调函数
func (proxy *ConsumerProxy) Regist(cb Callback) error {
	if proxy.IsOk() {
		return ErrProxyAllreadySettedClient
	}
	proxy.callBacks = append(proxy.callBacks, cb)
	return nil
}

//Proxy 默认的kafka Consumer代理对象
var Watcher = New()
